#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

int main(int argc, char *argv[]) {
    int rank, size, sum = 0;
    int num_elements;
    double start_time, end_time;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        printf("Enter the number of elements:\n");
        scanf("%d", &num_elements);
    }

    MPI_Bcast(&num_elements, 1, MPI_INT, 0, MPI_COMM_WORLD);
    int chunk_size = num_elements / size;
    int *input = (int *) malloc(num_elements * sizeof(int));

    if (rank == 0) {
        printf("Enter %d integers:\n", num_elements);
        for (int i = 0; i < num_elements; i++) {
            scanf("%d", &input[i]);
        }
    }

    MPI_Bcast(input, num_elements, MPI_INT, 0, MPI_COMM_WORLD);
    start_time = MPI_Wtime();

    int chunk_start = rank * chunk_size;
    int chunk_end = (rank == size - 1) ? num_elements : (rank + 1) * chunk_size;
    for (int i = chunk_start; i < chunk_end; i++) {
        sum += input[i];
    }

    if (rank == 0) {
        int result;
        MPI_Reduce(&sum, &result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
        printf("Sum: %d\n", result);
        end_time = MPI_Wtime();
        printf("Execution time: %f seconds\n", end_time - start_time);
    } else {
        MPI_Reduce(&sum, NULL, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    }

    free(input);
    MPI_Finalize();
    return 0;
}
