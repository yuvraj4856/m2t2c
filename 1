#include <stdio.h>
#include <stdlib.h>
#include <time.h>

const int N = 10000;
int comparison_count = 0;

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; j++) {
        comparison_count++;
        if (arr[j] <= pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return i + 1;
}

void quicksort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

int main() {
    int arr[N];

    srand((unsigned)time(NULL));

    for(int i = 0; i < N; i++) {
        arr[i] = rand() % 10;
    }

    clock_t start = clock();
    quicksort(arr, 0, N - 1);
    clock_t stop = clock();

    double duration = (double)(stop - start) / ((double)CLOCKS_PER_SEC / 1000000);
    printf("Execution time is %f microseconds\n", duration);

    for (int i = 1; i < N; i++)
    {
        if (arr[i] < arr[i - 1])
        {
            printf("Array is not sorted correctly!\n");
            return 1;
        }
    }

    printf("Array is sorted correctly.\n");
    printf("Number of comparisons made by partition function: %d\n", comparison_count);

    printf("Sorted array \n");
    for (int i = 0; i < N; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
