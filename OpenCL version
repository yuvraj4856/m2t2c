#include <stdio.h>
#include <stdlib.h>
#include <CL/cl.h>

#define ARRAY_SIZE 100

int main() {
    cl_int status;

    // Get the platform and device information
    cl_platform_id platform;
    status = clGetPlatformIDs(1, &platform, NULL);
    if (status != CL_SUCCESS) {
        printf("Error getting platform ID: %d\n", status);
        return 1;
    }
    cl_device_id device;
    status = clGetDeviceIDs(platform, CL_DEVICE_TYPE_GPU, 1, &device, NULL);
    if (status != CL_SUCCESS) {
        printf("Error getting device ID: %d\n", status);
        return 1;
    }

    // Create a context and command queue
    cl_context context = clCreateContext(NULL, 1, &device, NULL, NULL, &status);
    if (status != CL_SUCCESS) {
        printf("Error creating context: %d\n", status);
        return 1;
    }
    cl_command_queue queue = clCreateCommandQueue(context, device, 0, &status);
    if (status != CL_SUCCESS) {
        printf("Error creating command queue: %d\n", status);
        return 1;
    }

    // Create the program and kernel
    const char *source = "__kernel void sum(__global const int *input, __global int *output) { int sum = 0; for (int i = 0; i < ARRAY_SIZE; i++) { sum += input[i]; } *output = sum; }";
    cl_program program = clCreateProgramWithSource(context, 1, &source, NULL, &status);
    if (status != CL_SUCCESS) {
        printf("Error creating program: %d\n", status);
        return 1;
    }
    status = clBuildProgram(program, 1, &device, NULL, NULL, NULL);
    if (status != CL_SUCCESS) {
        printf("Error building program: %d\n", status);
        return 1;
    }
    cl_kernel kernel = clCreateKernel(program, "sum", &status);
    if (status != CL_SUCCESS) {
        printf("Error creating kernel: %d\n", status);
        return 1;
    }

    // Allocate input and output buffers
    int *input = (int*) malloc(sizeof(int) * ARRAY_SIZE);
    for (int i = 0; i < ARRAY_SIZE; i++) {
        input[i] = rand() % 100;
    }
    cl_mem input_buffer = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, sizeof(int) * ARRAY_SIZE, input, &status);
    cl_mem output_buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(int), NULL, &status);

    // Set kernel arguments
    status = clSetKernelArg(kernel, 0, sizeof(cl_mem), &input_buffer);
    status = clSetKernelArg(kernel, 1, sizeof(cl_mem), &output_buffer);

    // Enqueue the kernel
    size_t global_work_size = ARRAY_SIZE;
    size_t local_work_size = 256;
    cl_event event;
    status = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &global_work_size, &local_work_size, 0, NULL, &event);

    // Wait for the kernel to complete and get the result
    int output;
    status = clEnqueueReadBuffer(queue, output_buffer, CL_TRUE, 0, sizeof(int), &output, 0, NULL, NULL);
   
if (status != CL_SUCCESS) {
    printf("Error reading output buffer: %d\n", status);
    return 1;
}

printf("Sum: %d\n", output);

// Cleanup
clReleaseEvent(event);
clReleaseMemObject(input_buffer);
clReleaseMemObject(output_buffer);
free(input);
clReleaseKernel(kernel);
clReleaseProgram(program);
clReleaseCommandQueue(queue);
clReleaseContext(context);

return 0;
